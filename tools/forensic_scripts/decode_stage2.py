import base64
import zlib


data = "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"

reversed_data = data[::-1]

decoded_data = base64.b64decode(reversed_data)

try:
    decompressed_data = zlib.decompress(decoded_data)
except Exception as e:
    print("❌ Error", e)
    exit(1)

with open("decoded/decoded_layer2.py", "wb") as f:
    f.write(decompressed_data)

print("✅ decoded/decoded_layer2.py")